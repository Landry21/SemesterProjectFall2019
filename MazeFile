import javax.swing.JFrame;
import javax.swing.JPanel;

import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.beans.EventHandler;
import java.io.File;
import java.io.IOException;
import java.util.Scanner;

import javax.imageio.ImageIO;
import javax.swing.JButton;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;


@SuppressWarnings("serial")
public class MazeFile extends JFrame {
	MyCanvas myCanvas = null; 
	public MazeFile()
	{
		//super("FileReader");
		getContentPane().setLayout(null);
		
		//Fill canvas and add it to field panel
				int numRows = 0;
				int numCols = 0;
				try {
					Scanner sc= new Scanner(new File("Maze4.txt"));
					numRows = sc.nextInt();
					numCols = sc.nextInt();
					myCanvas = new MyCanvas(numRows, numCols);
					for(int i=0; i<numRows; i++) {
						for(int j=0; j<numCols; j++) {
							String s = sc.next();
							myCanvas.addPicture(i, j, s + ".png");
						}
					}
				}
				catch(Exception e)
				{
					System.out.println("Can't find the file");
				}
				
				//add the maze to the jFrame 
				
				if (myCanvas != null){
					myCanvas.setBounds(160, 6, 575, 500);
					getContentPane().add(myCanvas);
				}

		JPanel Controls = new JPanel();
		Controls.setBounds(6, 6, 140, 370);
		Controls.setLayout(null);

		JButton btnUp = new JButton("Up");
		btnUp.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
					myCanvas.moveNarUp();
			}
		});
		btnUp.setBounds(29, 6, 75, 29);
		Controls.add(btnUp);

		JButton btnLeft = new JButton("Left");
		btnLeft.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
				myCanvas.moveNarLeft();
			}
		});
		btnLeft.setBounds(6, 34, 68, 29);
		Controls.add(btnLeft);

		JButton btnRight = new JButton("Right");
		btnRight.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
				myCanvas.moveNarRight();
			}
		});
		btnRight.setBounds(62, 34, 68, 29);
		Controls.add(btnRight);

		JButton btnDown = new JButton("Down");
		btnDown.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
				myCanvas.moveNarDown();
			}
		});
		btnDown.setBounds(27, 59, 75, 29);
		Controls.add(btnDown);

		getContentPane().add(Controls);

		
	}
	public static void main (String[] args)
	{
		MazeFile m = new MazeFile();
		m.setSize(760, 650);
		m.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		m.setVisible(true);
	}
	
	// Create the MyCanvas to be added to the field
		 public class MyCanvas extends JPanel{
			private BufferedImage[][] imgs;
			private int rows;
			private int cols;
			public  BufferedImage nar;
			public int a=0;
			public int b=397;
			private final int tileSize = 64;
			public MyCanvas(int rows, int cols){
				super();
				this.rows = rows;
				this.cols = cols;
				imgs = new BufferedImage[rows][cols];
			}
			
			//Method that prints the Maze in myCanvas Panel
			public void addPicture(int x, int y, String filename){
				if (x < 0 || x >= rows){
					System.err.println("There is no row " + x);
				}
				else if (y < 0 || y >= cols){
					System.err.println("There is no col " + y);
				}
				else{
					try {
						nar=ImageIO.read(new File("Nar.png"));
						
						imgs[x][y] = ImageIO.read(new File(filename));
						
					} catch (IOException e) {
						System.err.println("Unable to read the file: " + filename);
						System.err.println("Unable to read the file: "+ nar);
					}
				}
			}
			
			public void paint(Graphics g){
				for (int i = 0; i < rows; i++){
					for (int j = 0; j < cols; j++){
						g.drawImage(imgs[i][j], j*tileSize, i*tileSize, null);
						g.drawImage(nar, a, b, 37, 37,null);
					}
				}
				
		//this would have been the method that ended the Maze once the character reached the destination but 
				//i din't get enough time
				if(a==rows) {
					//myCanvas.dispose();
				}
			}
			public void moveNarUp() {
				b-=10;
				repaint();
			}
			public void moveNarRight() {
				a+=10;
				repaint();
			}
			public void moveNarDown() {
				b+=10;
				repaint();
			}
			public void moveNarLeft() {
				a-=10;
				repaint();
			}
		}
}
